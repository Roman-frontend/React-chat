scalar ChatType

type RemoveMessagePayload {
  id: ID!
}

type CreateMessagePayload {
  id: ID
  senderId: ID
  text: String
  createdAt: String
  replyOn: String
  chatType: ChatType
  chatId: ID
}

type ChangeMessagePayload {
  id: ID
  senderId: ID
  text: String
  createdAt: String
  updatedAt: String
  replyOn: String
  chatType: ChatType
  chatId: ID
}

type MessagePayload {
  id: ID
  senderId: ID
  text: String
  createdAt: String
  updatedAt: String
  replyOn: String
  chatType: ChatType
  chatId: ID
}

type ChatMessagesPayload {
  id: ID
  chatMessages: [MessagePayload]
}

type Query {
  messages(chatId: ID!, chatType: ChatType!, userId: ID!): ChatMessagesPayload
}

type Mutation {
  message: MessageMutations
}

type MessageMutations {
  create(
    chat: ChatMessageInput!
    text: String!
    replyOn: String
  ): CreateMessagePayload!
  change(input: MessageChangeInput!): ChangeMessagePayload!
  remove(id: ID!, chatType: ChatType!): RemoveMessagePayload
}

input ChatMessageInput {
  senderId: ID!
  chatId: ID!
  chatType: ChatType!
}

input MessageChangeInput {
  id: ID!
  text: String!
  chatType: ChatType!
}
