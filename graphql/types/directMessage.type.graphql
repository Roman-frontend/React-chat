scalar JSON

type DirectMessage {
  id: ID
  members: [ID]
}

type UserDirectMessagesPayload {
  id: ID
  members: [ID]
}

type GmailRes {
  status: Int
  message: String
}

type RemoveDirectMessagePayload {
  recordId: ID
  record: DirectMessage
  status: StatusEnum
  query: Query
  error: ErrorInterface
}

enum StatusEnum {
  OK
  NO_CONTENT
  BAD_REQUEST
  UNAUTHORIZED
  FORBIDDEN
  NOT_FOUND
  SOME_INVITED
  ALL_INVITED
  INTERNAL_SERVER_ERROR
}
"""
An interface specifies a set of fields that multiple object types can include
"""
interface ErrorInterface {
  message: String
}

"""
If an object type implements an interface, it must include all of that interface's fields
implements - метод що дозволяє унаслідувати в даному випадку типу ValidatorError дані з ErrorInterface і додати свої
"""
type ValidatorError implements ErrorInterface {
  """
  field "message" - must be present because it has in interface
  """
  message: String
  """
  Source of the validation error from the model path
  """
  path: String
  """
  Field value which occurs the validation error
  """
  value: JSON
}

type AuthError implements ErrorInterface {
  message: String
  code: Int
  value: JSON
}

type MongoError implements ErrorInterface {
  """
  MongoDB error message
  """
  message: String
  """
  MongoDB error code
  """
  code: Int
}

"""
General type of error when no one of concrete error type are received
"""
type RuntimeError implements ErrorInterface {
  """
  Error message
  """
  message: String
}

type CreateDirectMessagePayload {
  recordId: [ID]
  record: [DirectMessage]
  status: StatusEnum
  query: Query
  error: ErrorInterface
}

type Query {
  directMessages(id: [ID]): [UserDirectMessagesPayload]!
  sendToGmail(
    from: String!
    to: String!
    subject: String
    text: String
  ): GmailRes!
}

type Mutation {
  directMessages: DirectMessagesMutations!
}

type DirectMessagesMutations {
  remove(id: ID!): RemoveDirectMessagePayload
  create(inviter: ID!, invited: [ID]!): CreateDirectMessagePayload!
}
